


@mixin renderGridStyles($gridSettings){
  .container {
    padding-right: map-get($gridSettings, "margin");
    padding-left: map-get($gridSettings, "margin");
    margin-right: auto;
    margin-left: auto;
    max-width: map-get($gridSettings,"maxWidth");
    width: 100%;
  }
  
  .row {
    margin-right: map-get($gridSettings, "margin") * -1;
    margin-left: map-get($gridSettings, "margin") * -1;
  }
  .col{
      padding-top: map-get($gridSettings, "padding");
      padding-bottom: map-get($gridSettings, "padding");
      box-sizing: border-box;
       -moz-box-sizing:border-box;
      padding-right: map-get($gridSettings, "padding");
  }
  $breakpoints: map-get($gridSettings, "breakpoints");
  @each $key, $breakpoint in $breakpoints {
    @include media($breakpoint) {
      @include renderGrid($key, $gridSettings);
    }
  }
}

@mixin renderGrid($key, $gridSettings) {
  $i: 1;
  @while $i <= map-get($gridSettings, "columns") {
    .col-#{$key}-#{$i} {
      float: left;
      width: (100% * $i / map-get($gridSettings,"columns"));
     
    }
    $i: $i+1;
  }
}

@mixin media($queryString){
    @media #{$queryString} {
      @content;
    }
}

@include renderGridStyles($gridSettings);

p {

  color: black;

}